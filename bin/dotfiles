#!/bin/bash

CLEAN='\033[0m'
GREEN='\033[00;32m'
RED='\033[00;31m'
GRAY='\033[01;30m'
CYAN='\033[00;36m'
OVERWRITE='\e[1A\e[K'

TASK=""

CHECK_MARK="${GREEN}\xE2\x9C\x94${CLEAN}"
ARROW="${SEA}\xE2\x96\xB6${CLEAN}"

# VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/.config/dotfiles"
SSH_DIR="$HOME/.ssh"

DOTFILES_LOG="$HOME/.dotfiles.log"

function _task {
	if [[ $TASK != "" ]]; then
		printf "${OVERWRITE}${GREEN} [✓]  ${CLEAN}${TASK}${CLEAN}\n"
	fi

	TASK=$1
	printf "${GRAY} [ ]  ${TASK} \n${CLEAN}"
}

function _cmd {
	#create log if it doesn't exist
	if ! [[ -f $DOTFILES_LOG ]]; then
		touch $DOTFILES_LOG
	fi

	>$DOTFILES_LOG
	# hide stdout, on error we print and exit
	if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
		return 0 # success
	fi
	# read error from log and add spacing
	printf "${OVERWRITE}${RED} [X]  ${TASK}${RED}\n"
	while read line; do
		printf "      ${line}\n"
	done <$DOTFILES_LOG
	printf "\n${CLEAN}"
	# remove log file
	rm $DOTFILES_LOG
	# exit installation
	exit 1
}

function _task_done {
	printf "${OVERWRITE}${GREEN} [✓]  ${CLEAN}${TASK}${CLEAN}\n"
	TASK=""
}

function archlinux_setup() {
	_task "Upgrading System"
	_cmd "sudo pacman -Syu --noconfirm"

	_task "Setup tty font"
	_cmd "sudo pacman -S --noconfirm terminus-font"
	_cmd "sudo setfont ter-132n"

	if ! [ -x "$(command -v ansible)" ]; then
		_task "Installing Ansible"
		_cmd "sudo pacman -S --noconfirm ansible"
	fi

	if ! pacman -Q python3 >/dev/null 2>&1; then
		_task "Installing Python3"
		_cmd "sudo pacman -S --noconfirm python3"
	fi

	if ! pacman -Q python-pip >/dev/null 2>&1; then
		_task "Installing Python3 Pip"
		_cmd "sudo pacman -S --noconfirm python-pip"
	fi

	if ! pip3 list | grep watchdog >/dev/null 2>&1; then
		_task "Installing Python3 Watchdog"
		_cmd "sudo pacman -S --noconfirm python-watchdog"
	fi

	if ! [ -x "$(command -v git)" ]; then
		_task "Installing Git"
		_cmd "sudo pacman -S --noconfirm git"
	fi

	if ! pacman -Q openssh >/dev/null 2>&1; then
		_task "Installing OpenSSH"
		_cmd "sudo pacman -S --noconfirm openssh"
	fi
}

source /etc/os-release
_task "Loading Setup for detected OS: $ID"

function update_ansible_galaxy() {
	local os=$1
	local os_requirements=""
	_task "Updating Ansible Galaxy"
	if [ -f "$DOTFILES_DIR/requirements/$os.yml" ]; then
		_task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
		os_requirements="$DOTFILES_DIR/requirements/$os.yml"
	fi
	_cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml $os_requirements"
}

case $ID in
arch)
	archlinux_setup
	;;
*)
	echo "Unsupported OS: ${ID}"
	;;
esac

# if ! [[ -d "$DOTFILES_DIR" ]]; then
# 	_task "Cloning dotfiles repository"
# 	_cmd "git clone --quiet -b ansible https://github.com/gravegrow/dotfiles.git $DOTFILES_DIR"
# else
# 	_task "Updating dotfiles repository"
# 	_cmd "git -C $DOTFILES_DIR pull --quiet"
# fi

pushd "$DOTFILES_DIR" 2>&1 >/dev/null
update_ansible_galaxy $ID

_task "Running playbook"
_task_done

if [[ -f $VAULT_SECRET ]]; then
	ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES_DIR/main.yml" "$@"
else
	ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
fi

popd 2>&1 >/dev/null
