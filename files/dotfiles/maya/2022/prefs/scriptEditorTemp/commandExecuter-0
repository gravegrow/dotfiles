'''
Title: Pose Reader v2.5    
Author:  Jonah Reinhart              
Date: February 15 2018  
Instructions:
Run the script
Adjust the settings on the pose reader so that your blendshapes are driven in the desired the way
Use the attributes on the pose reader to drive the weight of your corrective blendhshapes.
'''
def PSD_Window():
    if cmds.window("PSD_Window",query=True,exists=True):
        cmds.deleteUI("PSD_Window"); 
    
    cmds.window("PSD_Window", t = "PSD V2.5", mnb = False, mxb = False)
    PSD_form = cmds.formLayout()
    #
    header = cmds.text("SPHERICAL POSE READER v2.5")
    prefix_text = cmds.text("Enter the desired prefix")
    prefix_field = cmds.textField(w = 100)
    zone_text = cmds.text("Enter the desired number of zones")
    zone_field = cmds.intField(min = 2, max = 16, v = 2, w = 100)
    final_button = cmds.button("Create Pose Reader",bgc = (0,.5,0), w = 150,h = 30, c = 'PSD(cmds.textField("' + prefix_field + '",q=True,tx=True), cmds.intField("' + zone_field + '", q = True, v = True))')
    #
    cmds.formLayout(PSD_form, e = True, af = [
    #
    (header, "top", 10),
    (header, "left",30),
    #
    (prefix_text, "top", 30),
    (prefix_text, "left",10),
    #
    (prefix_field, "top", 50),
    (prefix_field, "left",50),
    #
    (zone_text, "top", 70),
    (zone_text, "left",10),
    #
    (zone_field, "top", 90),
    (zone_field, "left",50),
        #
    (final_button, "top", 120),
    (final_button, "left",30)
    ])
    cmds.showWindow("PSD_Window")
    cmds.window("PSD_Window", e = True, w = 210, h = 170)
    
PSD_Window()


def PSD(prefix,x):
    pose_jnt = ""
    if len(cmds.ls(sl = True)) > 0:
        if cmds.nodeType(cmds.ls(sl = True)[0]) == "joint":
            pose_jnt = cmds.ls(sl = True, l = True)[0]
    else:
        pose_jnt = cmds.spaceLocator(n = prefix + "_reader_loc")[0]

    pose_reader = cmds.sphere(s = 2, nsp = 2, axis = (1, 0, 0), n = prefix + "_poseReader",ch = False)[0]#create sphere facing positive X
    cmds.rebuildSurface(pose_reader, ch = 0, rpo = 1, end = 1, kr = 0, kcp = 1, su = 2, sv = 2)

    #
    #add texture choosing attributes
    cmds.addAttr(pose_reader, ln = "WeightMap", at = "long", min = 0, max = x - 1) 
    cmds.setAttr(pose_reader + ".WeightMap", e = True, k = True)
    cmds.addAttr(pose_reader, ln = "ColorRamp", at = "enum", en = "black and white: rainbow: heat map")
    cmds.setAttr(pose_reader + ".ColorRamp", e = True, k = True)
    texture_switch = cmds.createNode("chooser")
    #
    #add weight return attributes
    for i in range(0,x):
        cmds.addAttr(pose_reader, ln = "zone_" + str(i) + "_maxPoint", nn = "Zone " + str(i) + " Max Point", at = "double", dv  = 1)
        cmds.setAttr(pose_reader + ".zone_" + str(i) + "_maxPoint", e = True, k = True)
    for i in range(0,x):
        cmds.addAttr(pose_reader, ln = "zone_" + str(i) + "_weight", nn = "Zone " + str(i) + " Weight", at = "double", dv = 1)
        cmds.setAttr(pose_reader + ".zone_" + str(i) + "_weight", e = True, k = True)
    #
    #create reader
    matrix = cmds.createNode("decomposeMatrix", n = prefix + "_decomposeMatrix")#name
    cmds.connectAttr(pose_jnt + ".worldMatrix", matrix + ".inputMatrix")
    closest_pnt = cmds.createNode("closestPointOnSurface", n = prefix + "_pointOnSphere")
    cmds.connectAttr(matrix + ".outputTranslate", closest_pnt + ".inPosition")
    cmds.connectAttr (pose_reader + ".worldSpace[0]", closest_pnt + ".inputSurface")
    #
    zone_con_list = []
    #
    #create the switch that chooses which zones texture is displayed
    switch= cmds.createNode("layeredTexture", n  = prefix + "_textureMap_chooser")
    for i in range(0,x):#for each texture 
        zone_con = cmds.createNode("condition", n = prefix + "_zone" + str(i) + "_condition")
        cmds.connectAttr (pose_reader + ".WeightMap", zone_con + ".firstTerm")#connect pose reader enum var
        cmds.setAttr(zone_con + ".secondTerm", i)
        cmds.setAttr (zone_con + ".colorIfTrueR", 1)
        cmds.setAttr (zone_con + ".colorIfFalseR", 0)#0 is default for second term
        zone_con_list.append(zone_con)
    #
    #create color ramp feedback switch/
    #black and white
    BW = cmds.createNode("ramp", n = prefix + "_BW_feedback_ramp")
    #condition for black and white
    BW_con = cmds.createNode("condition", n = prefix + "_BW_condition")#if BW
    cmds.connectAttr (pose_reader + ".ColorRamp", BW_con + ".firstTerm")#connect pose reader enum var
    cmds.setAttr(BW_con + ".colorIfTrueR", 1)
    cmds.setAttr(BW_con + ".colorIfFalseR", 0)
    cmds.setAttr(BW_con + ".secondTerm", 0)
    #
    #rainbow
    rainbow = cmds.createNode("ramp", n = prefix + "_rainbow_feedback_ramp")
    cmds.setAttr (rainbow + ".colorEntryList[0].position", 0)
    cmds.setAttr (rainbow + ".colorEntryList[0].color", 0, 0, 0, type = "double3")#black
    cmds.setAttr (rainbow + ".colorEntryList[1].position", 1)
    cmds.setAttr (rainbow + ".colorEntryList[1].color", 1, 1, 1, type = "double3")#white
    cmds.setAttr (rainbow + ".colorEntryList[2].position", 0.25)
    cmds.setAttr (rainbow + ".colorEntryList[2].color", 0, 0, 1, type = "double3")#blue
    cmds.setAttr (rainbow + ".colorEntryList[3].position", 0.5)
    cmds.setAttr (rainbow + ".colorEntryList[3].color", 0, 1, 0, type = "double3")#green
    cmds.setAttr (rainbow + ".colorEntryList[4].position", 0.75)
    cmds.setAttr (rainbow + ".colorEntryList[4].color", 1, 0, 0, type = "double3")#red
    #condition for rainbow
    rainbow_con = cmds.createNode("condition", n  = prefix + "_rainbow_condition")#if BW
    cmds.connectAttr(pose_reader + ".ColorRamp", rainbow_con + ".firstTerm")#connect pose reader enum var
    cmds.setAttr(rainbow_con + ".colorIfTrueR", 1)
    cmds.setAttr(rainbow_con + ".colorIfFalseR", 0)
    cmds.setAttr(rainbow_con + ".secondTerm", 1)
    #
    #heat map
    HM = cmds.createNode("ramp", n  = prefix + "_heatMap_feedback_ramp")
    cmds.setAttr(HM + ".colorEntryList[0].position", 0)
    cmds.setAttr(HM + ".colorEntryList[0].color", 0, 0, 0, type  = "double3")
    cmds.setAttr(HM + ".colorEntryList[1].position", 1)
    cmds.setAttr(HM + ".colorEntryList[1].color", 1, 1, 1, type  = "double3")
    cmds.setAttr(HM + ".colorEntryList[2].color", 1, 1, 0, type  = "double3")
    cmds.setAttr(HM + ".colorEntryList[2].position", .9)
    cmds.setAttr(HM + ".colorEntryList[3].color", 1, 0, 0, type  = "double3")
    cmds.setAttr(HM + ".colorEntryList[3].position", .5)
    #condition for heat map 
    HM_con = cmds.createNode("condition", n = prefix + "_HM_condition")#if BW
    cmds.connectAttr(pose_reader + ".ColorRamp", HM_con + ".firstTerm")#connect pose reader enum var
    cmds.setAttr(HM_con + ".colorIfTrueR", 1)
    cmds.setAttr(HM_con + ".colorIfFalseR", 0)
    cmds.setAttr(HM_con + ".secondTerm", 2)
    #
    #layered texture which uses the condition nodes to switch the color feedback mode
    feedback_chooser = cmds.createNode("layeredTexture", n = prefix + "_feedback_ramp_chooser")        
    cmds.connectAttr(BW + ".outColor", feedback_chooser + ".inputs[0].color")
    cmds.connectAttr(BW_con + ".outColorR", feedback_chooser + ".inputs[0].alpha")
    cmds.connectAttr(rainbow + ".outColor", feedback_chooser + ".inputs[1].color")
    cmds.connectAttr(rainbow_con + ".outColorR", feedback_chooser + ".inputs[1].alpha")
    cmds.connectAttr(HM + ".outColor", feedback_chooser + ".inputs[2].color")
    cmds.connectAttr(HM_con + ".outColorR", feedback_chooser + ".inputs[2].alpha")       
    #
    #create the shader that uses the texture
    shader = cmds.createNode("surfaceShader", n = prefix + "_textureMap_shader")
    shading_set = cmds.sets(renderable = True, noSurfaceShader = True, empty = True)
    #
    cmds.connectAttr(switch+ ".outColorR", BW + ".v")
    cmds.connectAttr(switch+ ".outColorR", rainbow + ".v")
    cmds.connectAttr(switch+ ".outColorR", HM + ".v")
    cmds.connectAttr(feedback_chooser + ".outColor", shader + ".outColor") 
    cmds.connectAttr(shader + ".outColor", shading_set + ".surfaceShader")
    #
    for i in range(0,x):#for each textures
        for j in range(0,2):#for readable texture and then visual texture
                
            #create reading texture
            #null zone around base
            null_zone = cmds.createNode("ramp", n = prefix + "_nullZone_" + str(i) + "_ramp")#null zone ramp
            cmds.setAttr(null_zone + ".type", 1)#set to U ramp so it is around the "pole"
            cmds.setAttr(null_zone + ".colorEntryList[1].color", 1, 1, 1, type  = "double3") #set end to white
            cmds.setAttr(null_zone + ".colorEntryList[0].color", 0, 0, 0, type  = "double3") 
            cmds.setAttr(null_zone + ".colorEntryList[0].position", 1)#set start to black
            
            rev_node = cmds.createNode("reverse", n = prefix + "_reverse" + str(i))
            cmds.connectAttr(pose_reader + ".zone_" + str(i) + "_maxPoint", rev_node + ".inputX")
            cmds.connectAttr(rev_node + ".outputX", null_zone + ".colorEntryList[1].position")#connect attribute to adjust the null zone
            
            if (j == 0):
                cmds.connectAttr(closest_pnt + ".u", null_zone + ".u")#connect reader U to ramp U
            
            #strip zone
            strip_ramp = cmds.createNode("ramp", n = prefix + "_zone" + str(i) + "_strip_ramp")#create strip ramps
            
            for k in range(0,x + 1):
                if (k == i):#if the ramp is the current zone
                    cmds.setAttr(strip_ramp + ".colorEntryList[" + str(k) + "].color", 1, 1, 1, type = "double3")#make it white
                else:
                    cmds.setAttr(strip_ramp + ".colorEntryList[" + str(k) + "].color", 0, 0, 0, type = "double3")#otherwise make it black   
                    
                if (i == 0):
                    cmds.setAttr(strip_ramp + ".colorEntryList[" + str(x) + "].color", 1, 1, 1, type = "double3")#if it is the first zone make the last ramp color white
            
                cmds.setAttr(strip_ramp + ".colorEntryList[" + str(k) + "].position", float(k) * 1 / float(x))
            
            #multiply the values from the reader network
            if (j == 0):
                cmds.connectAttr(closest_pnt + ".v", strip_ramp + ".v")#connect reader V to ramp V
                UV_mult = cmds.createNode("multDoubleLinear", n = prefix + "_zone" + str(i) + "_mult")#create node to multiply 
                cmds.connectAttr(null_zone + ".outColorR", UV_mult + ".input1")#connect U to mult node
                cmds.connectAttr(strip_ramp + ".outColorR", UV_mult + ".input2")#connect V to mult node
                cmds.connectAttr(UV_mult + ".output", pose_reader + ".zone_" + str(i) + "_weight")#connect to weight display on pose reader
            
            #layer the textures from the visual network
            if (j == 1):
                layers = cmds.createNode("layeredTexture", n  = prefix + "_disp_zone" + str(i) + "_ramps_layered")
                cmds.connectAttr(null_zone + ".outColor", layers + ".inputs[0].color")
                cmds.setAttr(layers + ".inputs[0].blendMode", 6)#multiply
                cmds.connectAttr(strip_ramp + ".outColor", layers + ".inputs[1].color") 
                cmds.connectAttr(layers + ".outColor", switch + ".inputs[" + str(i) + "].color")
                cmds.connectAttr(zone_con_list[i] + ".outColorR", switch + ".inputs[" + str(i) + "].alpha")
   
    cmds.sets( pose_reader , e  = True, forceElement = shading_set)